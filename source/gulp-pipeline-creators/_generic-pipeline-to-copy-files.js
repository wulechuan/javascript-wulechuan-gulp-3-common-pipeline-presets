module.exports = buildAPipelineForCopyingSomeFiles;

/*
*
*
*
*
*
*
* ****************************************
*           任务集工厂函数；工具
* ****************************************
*/

const pathTool = require('path');
const deleteFiles = require('del');

// const chalk = require('chalk');

const gulp = require('gulp');

const { join: joinPath } = pathTool;
const { sync: deleteFilesSync } = deleteFiles;

const getValidatedGlobsFrom = require('../utils/get-validated-globs');
// const printInfoAboutTheCompletionOfTask = require('../utils/print-one-task-done');
const createTaskForCopyingFiles         = require('../gulp-task-creators/_generic-copy-files');

const { namePrefixOfEveryAutoGeneratedTask } = require('../configurations');


function buildAPipelineForCopyingSomeFiles({ // eslint-disable-line max-statements
	// logging
	pipelineCategory, // e.g. 'Javascript' or '爪哇脚本'
	taskNameKeyPart, // e.g. 'Page: User Dashboard' or maybe just 'App'

	// source
	sourceBasePath,                     // e.g. 'front-end/source/js'
	globsToCopyRelativeToSoureBasePath, // e.g. [ '**/*.js' ]

	// e.g. [ 'd:/projects/something/**.* '],
	// An excluded glob can be either an absolute one or a relative one.
	// If an excluded glob is a relative one,
	// then it's assumed that
	// the reference base path is the sourceBasePath.
	globsToExclude,

	// copying
	copyingFilesOutputBasePath, // e.g. 'build/tryout-website/assets'
	optionsOfCopyingFiles, // will be passed to **createTaskForCopyingFiles**
}) {
	const validatedRelativeSourceGlobsToCopy = getValidatedGlobsFrom({
		rawGlobs: globsToCopyRelativeToSoureBasePath,
		defaultValue: [ '**/*' ],
	});

	const excludedGlobsRelativeToSourceBasePath = getValidatedGlobsFrom({
		rawGlobs: globsToExclude,
		defaultValue: [], // To omit means nothing to exclude.
	}).map(glob => {
		const resolvedGlob = pathTool.resolve(sourceBasePath, glob);
		return pathTool.relative(sourceBasePath, resolvedGlob);
	});



	// This globs array below is for watching configuration only.
	// Note that watching configuration has its own `watchingBasePath`,
	// thus we need to pass a watcher the relative globs,
	// instead of resolved ones.
	const relativeSourceGlobsToCopyPlusRelativeExcludedGlobs = [
		...validatedRelativeSourceGlobsToCopy,
		...excludedGlobsRelativeToSourceBasePath.map(
			glob => `!${glob}`
		),
	];



	const resolvedPathsOfGlobsToCopy = validatedRelativeSourceGlobsToCopy.map(
		glob => joinPath(sourceBasePath, glob)
	);

	const resolvedPathsOfGlobsToDeleteBeforeCopyingAgain = validatedRelativeSourceGlobsToCopy.map(
		glob => joinPath(copyingFilesOutputBasePath, glob)
	);

	excludedGlobsRelativeToSourceBasePath.forEach(glob => {
		resolvedPathsOfGlobsToCopy.push(
			`!${joinPath(sourceBasePath, glob)}`
		);
	});

	excludedGlobsRelativeToSourceBasePath.forEach(glob => {
		resolvedPathsOfGlobsToDeleteBeforeCopyingAgain.push(
			`!${joinPath(copyingFilesOutputBasePath, glob)}`
		);
	});



	const pipelineFullName = `${pipelineCategory}: ${taskNameKeyPart}`;

	const taskNameOfDeletingFiles = `${namePrefixOfEveryAutoGeneratedTask} Delete copied output files: ${pipelineFullName}`;
	const taskNameOfCopyingFiles  = `${namePrefixOfEveryAutoGeneratedTask} Copy source files: ${         pipelineFullName}`;
	const taskNameOfLastTaskInThisPipeline = taskNameOfCopyingFiles;





	const taskBodyOfDeletingFiles = (thisTaskIsDone) => {
		deleteFilesSync(resolvedPathsOfGlobsToDeleteBeforeCopyingAgain, {
			force: true, // force 为 true，是为了删除位于 npm 项目文件夹之外的文件。
		});
		// printInfoAboutTheCompletionOfTask(taskNameForDeletingFiles, false);
		thisTaskIsDone();
	};

	const usedCopyingFilesTaskOption = {
		...{
			shouldFlattenSubFolders:   false,
			logPrefix:                 taskNameOfCopyingFiles,
			// descriptionOfAssetsToCopy: pipelineFullName,
			shouldNotLogDetails:       true,
			shouldListSourceFiles:     false,
		},

		...optionsOfCopyingFiles,
	};

	const taskBodyOfCopyingFiles = createTaskForCopyingFiles(
		resolvedPathsOfGlobsToCopy,
		copyingFilesOutputBasePath,
		usedCopyingFilesTaskOption
	);

	const actionToTakeOnSourceFilesChange = taskBodyOfCopyingFiles;





	gulp.task(taskNameOfDeletingFiles, taskBodyOfDeletingFiles);
	gulp.task(taskNameOfCopyingFiles, [ taskNameOfDeletingFiles ], taskBodyOfCopyingFiles);





	const pipelineSettings = {
		// logging
		pipelineFullName,

		// globs of pipeline
		resolvedPathsOfGlobsToCopy,
		resolvedPathsOfGlobsToDeleteBeforeCopyingAgain,

		// globs for watching
		watchingBasePath: sourceBasePath,
		watchingGlobsRelativeToBasePath: relativeSourceGlobsToCopyPlusRelativeExcludedGlobs,

		// task names

		taskNameOfLastTaskInThisPipeline,
		taskNameOfCopyingFiles,
		taskNameOfDeletingFiles,

		// task bodies
		toBuild: taskBodyOfCopyingFiles,
		toClean: taskBodyOfDeletingFiles,

		actionToTakeOnSourceFilesChange, // 显然，这是针对【文件变动监测机制】的
	};




	return pipelineSettings;
}
